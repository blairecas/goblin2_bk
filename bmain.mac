	.title	GOBLI2
	.enabl	LC		; do not use AMA here, contains relocatable code
	.list	MEB
	
	.asect
	.=2000			; BK-0011M - use 2000 as start addr

C_RAM_BANKS51	= ^B0001100000000000

C_LDR_LENGTH	= LoaderEnd - Loader
C_LDR_START	= 40000 - C_LDR_LENGTH
C_ZX0_LENGTH	= CpuBinEnd - CpuBin
C_ZX0_START	= C_LDR_START - C_ZX0_LENGTH

Start:	mtps	#200
	mov	#1000, SP

	; check for 11(M)
	cmpb	@#177717, #300
	bne	10$

	; for 11(M) unpack music to bank #1
	mov	#C_RAM_BANKS51, @#177716
	mov	#MusicBin, R0
	mov	#100000, R1
	call	Unpack

10$:	; relocate main unpacker to 40000-...
	mov	#Loader, R1
	mov	#C_LDR_START, R2
	mov	#C_LDR_LENGTH/2, R3
	mov	(R1)+, (R2)+
	sob	R3, .-2

	; relocate packed code just below loader
	mov	#CpuBinEnd, R1
	mov	#C_LDR_START, R2
	mov	#C_ZX0_LENGTH/2, R3
	mov	-(R1), -(R2)
	sob	R3, .-2

	; unpack then
	jmp	@#C_LDR_START

Loader:	; unpack main code
	mov	#C_ZX0_START, R0
	mov	#1000, R1
	call	Unpack
	jmp	(SP)

; ZX0 v2.2 standart unpacker
; original ZX0 encoder/decoder (c) Einar Saukas & Urusergi
; PDP11 version by reddie, 02-may-2024 (upd)
; R0 - source addr, R1 - dest addr
Unpack:	clr	R2
	movb	#200, R3
	sxt	R5
10$:	call	50$
	movb	(R0)+, (R1)+
	sob	R2, .-2
	aslb	R3
	bcs	30$
	call	50$
20$:	mov	R1, R4
	add	R5, R4
	movb	(R4)+, (R1)+
	sob	R2, .-2
	aslb	R3
	bcc	10$
30$:	mov	#-2, R2
	call	60$
	incb	R2
	bne	.+4
40$:	return
	swab	R2
	mov	R2, R5
	clrb	R5
	bisb	(R0)+, R5
	asr	R5
	mov	#1, R2
	bcs	.+6
	call	80$
	inc	R2
	br	20$
50$:	incb	R2
60$:	aslb	R3
	bne	70$
	movb	(R0)+, R3
	rolb	R3
70$:	bcs	40$
80$:	aslb	R3
	rol	R2
	br	60$

LoaderEnd:

; // Main program /////////////////////////////////////////////////////////////

CpuBin:
	@includebin _acpu_lz.bin
	.even
CpuBinEnd:

MusicBin:
	@includebin _music_lz.bin
	.even

	.end Start